private String buildLogEntry(OperationalRetentionRule existingEntity) {
    StringBuilder logEntry = new StringBuilder();

    // Append old values or just the field name
    appendMultiValuedField(logEntry, "Validator",
        existingEntity.getOperationalRetentionRuleActorList().stream()
                     .map(OperationalRetentionRuleActor::getValidatorName)
                     .collect(Collectors.toList()));

    appendMultiValuedField(logEntry, "Committer",
        existingEntity.getOperationalRetentionRuleActorList().stream()
                     .map(OperationalRetentionRuleActor::getCommitterName)
                     .collect(Collectors.toList()));

    appendField(logEntry, "Comment", existingEntity.getComment());
    appendField(logEntry, "Periodicity", existingEntity.getPeriodicityOfDisposalApplicationPurge() != null
            ? existingEntity.getPeriodicityOfDisposalApplicationPurge().name() : null);
    appendField(logEntry, "NRR Id", existingEntity.getRetentionPeriodValue());

    appendMultiValuedField(logEntry, "Entities",
        existingEntity.getOperationalRetentionRuleAndLegalEntity().stream()
                     .map(LegalEntity::getName)
                     .collect(Collectors.toList()));

    return logEntry.toString();
}

private void appendField(StringBuilder logEntry, String fieldName, Object oldValue) {
    if (logEntry.length() > 0) {
        logEntry.append(":::: ");
    }

    if (oldValue != null) {
        logEntry.append(fieldName).append(" :: ").append(oldValue);
    } else {
        logEntry.append(fieldName); // Only the field name if no old value
    }
}

private void appendMultiValuedField(StringBuilder logEntry, String fieldName, List<String> oldValues) {
    if (logEntry.length() > 0) {
        logEntry.append(":::: ");
    }

    if (oldValues != null && !oldValues.isEmpty()) {
        logEntry.append(fieldName).append(" :: ").append(String.join(", ", oldValues));
    } else {
        logEntry.append(fieldName); // Only the field name if no old values
    }
}
